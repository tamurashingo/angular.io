
<!-- MOBILE -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-stay-current-portrait"></span>
  .c7
    // h3.text-headline.text-uppercase  Mobile First
    h3.text-headline.text-uppercase  モバイルファースト
    p.text-body.
      <!---
      Angular's modular library design and mobile-specific routing help keep
      your app's code lean, so users on low-bandwidth networks don't need to wait.
      Other mobile-first features include first-class support for touch event gestures,
      tuning for performance and low-memory usage on mobile platforms, and
      material design UI components with responsive, cross-device support.
      --->
      Angularのモジュールライブラリの設計と、モバイルに特化したルーティングで
      コードを効率的にすることができるため、低速なネットワークのユーザを
      待たせることがありません。
      その他、モバイルファーストな機能はファーストクラスのタッチイベントのジェスチャーのサポート、
      モバイルプラットフォームのパフォーマンスと省メモリのチューニング、
      レスポンシブでクロスデバイスをサポートしたマテリアルデザインのUIコンポーネントを含みます。


<!-- TypeScript -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-fast-forward"></span>
  .c7
    // h3.text-headline.text-uppercase  Future Ready
    h3.text-headline.text-uppercase  次世代の準備
    p.text-body.
      <!---
      Angular 2 is written in TypeScript, which is a superset of
      ECMAScript 6 (ES6) with the addition of features including
      types and annotations. TypeScript allows Angular to benefit from the
      best of JavaScript, while maintaining clean and easy-to-read code.
      --->
      Angular 2 は TypeScript、ECMAScript 6 (ES6) の上位互換に型とアノテーションを追加したもの、で書かれています。
      TypeScriptを使うことで、Angularは最高のJavaScriptを使うことができ、
      クリーンで読みやすいコードを書くことができます。


<!-- Coffee, Dart, ES6 -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-favorite"></span>
  .c7
    // h3.text-headline.text-uppercase  Flexible Development
    h3.text-headline.text-uppercase  柔軟な開発
    p.text-body.
      <!---
      The choice of language is up to you.
      In addition to providing full support for ES6 and TypeScript,
      Angular 2 works equally well with today's ES5, Dart, CoffeeScript,
      and other languages that compile to JavaScript.
      --->
      言語の選択はあなた次第です。
      ES6 と TypeScript のフルサポートに加え、
      Angular 2 は 今日のES5、Dart、CoffeeScript、そのほかJavaScriptにコンパイル
      できる言語で動かすことができます。



<!-- Speed & Performance -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-av-timer"></span>
  .c7
    // h3.text-headline.text-uppercase  Speed &amp; Performance
    h3.text-headline.text-uppercase  スピード &amp; パフォーマンス
    p.text-body.
      <!---
      Change detection is now 5x faster,
      thanks to tunings for modern JavaScript engines.
      If you use data structures that imply change guarantees
      (like immutables and observables), Angular 2 can use those guarantees
      to speed up your application.
      --->
      モダンなJavaScriptエンジン用にチューニングした結果、検出は5倍以上速くなりました。
      (immutableやobservableのような)変更があることを暗示するデータ構造を使う場合、
      Angular2ではそれらを使ってアプリケーションを高速化することができます。


<!-- Simplicity -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon is-small icon-embed2"></span>
  .c7
    // h3.text-headline.text-uppercase  Simple &amp; Expressive
    h3.text-headline.text-uppercase  シンプル &amp; 表現豊か
    p.text-body.
      <!---
      Make your intention clear using natural, easy-to-write syntax.
      Reduce complexity for your team: new, structure-rich templates are
      readable and easy to understand at a glance.
      --->
      自然で書きやすい構文を使って意図を明確に伝えることができます。
      チームから複雑さを減らしましょう: 新しい、構造豊かなテンプレートは
      読みやすく一目で理解できるようになります。


<!-- Routing  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-call-split"></span>
  .c7
    // h3.text-headline.text-uppercase Comprehensive Routing
    h3.text-headline.text-uppercase 包括的なルーティング
    p.text-body.
      <!---
      Design sophisticated views:
      map URL paths to application components,
      and use advanced features like nested and sibling routes.
      Angular 2 supports card stack navigation, animated transitions, and
      lazy loading for mobile users.
      If you already use routing from a prior version of Angular,
      you can easily migrate to Angular 2 routing.
      --->
      洗練されたビューを設計しましょう:
      アプリケーションコンポーネントにURLパスをマップし、
      使う入れ子になったルーティングや兄弟ルーティングのような先進的な機能を使いましょう。
      Angular2はモバイル向けにカードスタックナビゲーション、アニメーション遷移、
      遅延読み込みをサポートしています。
      もしすでに以前のAngularからルーティングを使っている場合は、
      Angular2のルーティングの移行は簡単に行えるでしょう。


<!-- Animations  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-flip"></span>
  .c7
    // h3.text-headline.text-uppercase Animations
    h3.text-headline.text-uppercase アニメーション
    p.text-body.
      <!---
      Tap directly into low-level animation support on
      mobile and desktop environments with easy-to-use Angular events.
      You can use CSS, JavaScript, and the Web Animations API to
      intelligently handle changes to animations in response to user events.
      Plan complex animation flows by sequencing the behavior of
      an entire website on a timeline.
      --->
      簡単に扱えるAngularのイベントを使って、モバイルとデスクトップの環境で
      サポートされている低水準のアニメーションを直接叩きましょう。
      CSS、JavaScript、WebアニメーションAPIを使って
      ユーザのイベントに反応するアニメーションを知的に
      処理することができます。
      タイムライン上のウェブサイト全体の振る舞いを並べて
      複雑なアニメーションを計画しましょう。


<!-- Dependency Injection  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-now-widgets"></span>
  .c7
    // h3.text-headline.text-uppercase Hierarchical Dependency Injection
    h3.text-headline.text-uppercase 階層的な依存性注入(Dependency Injection)
    p.text-body.
      <!---
      Angular 2 ships with powerful, yet simple-to-use dependency injection,
      allowing you to maintain modular applications without writing tedious glue code.
      Dependency injection helps you write tests
      by making it easy to inject test doubles.
      --->
      Angular2はパワフル、それでいてシンプルな依存性注入を作りました。
      それによって、退屈な糊付け用のコードが不要なモジュール化されたアプリケーションがメンテナンスできます。
      依存性注入を使うとテストを簡単に注入できるため、2倍テストが書きやすくなります。



<!-- Web Components -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-web"></span>
  .c7
    // h3.text-headline.text-uppercase Support for Web Components
    h3.text-headline.text-uppercase Webコンポーネントのサポート
    p.text-body.
      <!---
      Angular 2 plays nicely with web components built using other libraries
      (Polymer, X-Tag, and others), allowing you to pass data into them
      as easily as if they were written in Angular.
      Angular components use web standards
      (such as shadow DOM and the HTML5 template tag)
      in browsers that support them.
      --->
      Angular2は他のライブラリ(Polymer、X-Tagなど)を使ってWebコンポーネントで遊ぶことができます。
      Angular製のコンポーネントと同じように簡単にデータを渡せます。
      AngularのコンポーネントはブラウザがサポートしているWeb標準(シャドウDOM、HTML5テンプレートタグなど)を使います。



<!-- Internationalization & Accessibility -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-accessibility"></span>
  .c7
    // h3.text-headline.text-uppercase Internationalization (I18N) &amp; Accessibility
    h3.text-headline.text-uppercase 国際化 (I18N) &amp; アクセシビリティ
    p.text-body(ng-non-bindable).
      <!---
      Reach all your users.
      Use the familiar ICU message format in Angular interpolation syntax
      (<b>{{  }}</b>), including pluralization and gender rules.
      Automate message extraction, pseudo-localization, and translation updates.
      Generate static applications for each locale.
      Easily promote accessibility via screen readers and assistive devices by automatically generating appropriate ARIA attributes.
      --->
      すべてのユーザに届けましょう。
      複数化や選択のルールを含んだAngularの挿入構文(<b>{{ }}</b>)で使いやすいICUのメッセージフォーマットを使いましょう。
      メッセージの展開、擬似ローカライズ化、最新情報の翻訳を自動で行いましょう。
      各言語向けに静的なページを生成しましょう。
      適切なARIA属性を自動生成して、スクリーンリーダーや支援機器を通したアクセシビリティを促進させましょう。


!= partial("/_includes/_cta-bar")
